#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2012 Openstack, LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#!/usr/bin/env python

'''
Websocket proxy that is compatible with Openstack Nova.
Leverages websockify by Joel Martin
'''

import socket
import sys

import websockify


class NovaWebSocketProxy(websockify.WebSocketProxy):
    def __init__(self, *args, **kwargs):
        websockify.WebSocketProxy.__init__(self, *args, **kwargs)

    def new_client(self):
        """
        Called after a new WebSocket connection has been established.
        """
        host = "192.2.3.44"
        port = 80
        vnc_location = "/console?uuid=3e282897-9770-f843-9085-aefc7e0810ad&session_id=OpaqueRef:32ba4b8e-9a9a-79a7-6e21-b2f4e3c71272"
         
        # Connect to the target
        self.msg("connecting to: %s:%s" % (
                 host, port))
        tsock = self.socket(host, port,
                connect=True)

        # Handshake as necessary
        tsock.send("CONNECT %s HTTP/1.1\r\n\r\n" %
                    vnc_location)
        while True:
            data = tsock.recv(4096, socket.MSG_PEEK)
            if data.find("\r\n\r\n") != -1:
                if not data.split("\r\n")[0].find("200"):
                    raise Exception("Invalid Connection Info")
                tsock.recv(len(data))
                break

        if self.verbose and not self.daemon:
            print(self.traffic_legend)

        # Start proxying
        try:
            self.do_proxy(tsock)
        except:
            if tsock:
                tsock.shutdown(socket.SHUT_RDWR)
                tsock.close()
                self.vmsg("%s:%s: Target closed" % (host, port))
            raise


if __name__ == '__main__':
    server = NovaWebSocketProxy(listen_host="127.0.0.1", listen_port=1999, verbose=True)
    server.start_server()
